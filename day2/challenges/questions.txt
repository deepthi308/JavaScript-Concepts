//Question 1

/*
Steven wants to build a very simple tip calculator for whenever he goes eating in the resturant. In his country, It's usual to tip 15% if the bill value is between 50 and 300. If the value is different, the tip is 20%.

1. Your task is to calculate the tip, depending on the bill value. Create a variable called 'tip' for this. It's not allowed to use an if/else statement (If it is easier for you, you can start with an if/else statement and convert it to a ternary operator!)
2. Print a string to the console containing the bill value, the tip, and the final value(bill+tip).
Example: 'The bill was 275, the tip was 41.25, and the total value 316.25'

Test Data: Test for bill values 275, 40 and 430
*/

//-------------------Notes-------------------------//

//***********History Of Javascript*****************

Since the beginning of the internet developers want to make the website interactive. In other words they need a programming language for the browser to add interactivity to the web pages in addition to the markup languages that structures the web page and the css which help in styling of the web page.

In the year of 1995, netscape hired the guy named brendan eich. He is the one who created the first version of javascript in just 10 days for the netscape navigator browser.

It was called mocha and already had many fundamental features of modern javascript.

In 1996 mocha changes to livescript and then to javascript, inorder to attract java developers (marketing purpose). However, Javascript has almost nothing to do with java.

Microsoft launched internet explorer, copyig javascript from the netscape and calling it Jscript.

In 1997 with the need to standardize the language, ECMA releases ECMAScript(ES1), the first official standard for javascript(ECMAScript is the standard, javascript is language in practice).

In 2009 ES5 (ECMAScript) is released with a lot of good features.

In 2015 ES6/ES2015 was released: The biggest update to the language ever.

//***********Backwards Compatibilityüëç***************

code writted in 1997 <-üëç- Modern javascript engine 2023

The code that was written in 1997 will work and modern javascript engine can still able to interpret the code.

Because In javascript the additional features are added to the language at the same time the old features and functionalities are still present. Not really new versions, just new features.

So, it is backwards compatible (It won't break the web).

The ECMAScript community who works on updating the language does all these so these websites can keep working forever

//***********Forwards Compatibilityüëé*****************

But, javascript is not forward compatible if you take a code from the future and try to run in todays browser. The browser won't understand the code and would break.

But, if you take a code from past and run in the modern borswer. It will work fine. since modern javascript is updated on top of that. So, the engine can able to interpret.

//*************How to use javascript today**********

1. During development: Simply use the latest google chrome so all the updated features will work.

2. During Production: Use babel to transpile and polyfill your code (Coverting back to ES5 to ensure browser compatibilty for all users). Because we don't know what browser the user might use. So we have to convert these modern browser versions back to ES5 using a process called transpile and polyfill. For that we will use a tool called babel to transpile the code.

During development we can use modern uptodata browser following last ECMAScript standard. But when we want share it with the users we must need to transpile and polyfill inorder to convert to ES5 which will then be supported in all the browsers.

ES5 ---> Fully supported by all the browsers (down to IE9 to 2011).
Ready to be used today.

ES6/ES2015 to ES2020 ---> ES6+ well supported in modern browsers. But no support in old browsers. Can use most features in production by transpiling and polyfilling.

//-------------------Notes-------------------------//